<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Francisco Torres&#39; Portfolio</title>
    <link>https://torres-xyz.github.io/portfolioblog/</link>
    <description>Recent content on Francisco Torres&#39; Portfolio</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 10 Jan 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://torres-xyz.github.io/portfolioblog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Unity Tools</title>
      <link>https://torres-xyz.github.io/portfolioblog/posts/unity_tools/</link>
      <pubDate>Fri, 10 Jan 2025 00:00:00 +0000</pubDate>
      
      <guid>https://torres-xyz.github.io/portfolioblog/posts/unity_tools/</guid>
      <description>I&amp;rsquo;ve done some custom Unity tools for different projects and for different companies. Here are some of them:
Timeline Editor This timeline editor allows you to schedule different types of events in a Unity scene. If you create a Linear timeline, the script will wait for each timeline item to be finished before starting the next one.
If you create a Parallel timeline, the script will play all timeline items at once.</description>
    </item>
    
    <item>
      <title>Raylib</title>
      <link>https://torres-xyz.github.io/portfolioblog/posts/raylib/</link>
      <pubDate>Wed, 11 Sep 2024 00:00:00 +0000</pubDate>
      
      <guid>https://torres-xyz.github.io/portfolioblog/posts/raylib/</guid>
      <description>Yesterday I started playing around with the raylib library. It was surprisingly easy to get started with and use.
I used &amp;lsquo;vcpkg&amp;rsquo; to install raylib and set up and the dependencies and environments and quickly completed a small Pong tutorial.
I plan on expanding it in the future, and add menus and sound effects. I&amp;rsquo;ll keep posting updates here.</description>
    </item>
    
    <item>
      <title>Visual Studio Code Snippets</title>
      <link>https://torres-xyz.github.io/portfolioblog/posts/visual_studio_snippets/</link>
      <pubDate>Tue, 06 Aug 2024 00:00:00 +0000</pubDate>
      
      <guid>https://torres-xyz.github.io/portfolioblog/posts/visual_studio_snippets/</guid>
      <description>Pasting my VS Code Snippets here for quick reference:
SerializeField Snippet Type sfield to get [SerializeField] private
&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;&amp;lt;CodeSnippets xmlns=&amp;quot;http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet&amp;quot;&amp;gt;&amp;lt;CodeSnippet Format=&amp;quot;1.0.0&amp;quot;&amp;gt;&amp;lt;Header&amp;gt;&amp;lt;Title&amp;gt;[SerializeField]&amp;lt;/Title&amp;gt;&amp;lt;Author&amp;gt;Francisco Torres&amp;lt;/Author&amp;gt;&amp;lt;Shortcut&amp;gt;sfield&amp;lt;/Shortcut&amp;gt;&amp;lt;/Header&amp;gt;&amp;lt;Snippet&amp;gt;&amp;lt;Code Language=&amp;quot;CSharp&amp;quot;&amp;gt;&amp;lt;![CDATA[[SerializeField] private $Type$;$end$]]&amp;gt;&amp;lt;/Code&amp;gt;&amp;lt;Declarations&amp;gt;&amp;lt;Literal&amp;gt;&amp;lt;ID&amp;gt;Type&amp;lt;/ID&amp;gt;&amp;lt;ToolTip&amp;gt;Variable type&amp;lt;/ToolTip&amp;gt;&amp;lt;Default&amp;gt;&amp;lt;/Default&amp;gt;&amp;lt;/Literal&amp;gt;&amp;lt;/Declarations&amp;gt;&amp;lt;/Snippet&amp;gt;&amp;lt;/CodeSnippet&amp;gt;&amp;lt;/CodeSnippets&amp;gt;Header Snippet Type header to get [Header(&amp;quot; &amp;quot;)]
&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;&amp;lt;CodeSnippets xmlns=&amp;quot;http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet&amp;quot;&amp;gt;&amp;lt;CodeSnippet Format=&amp;quot;1.0.0&amp;quot;&amp;gt;&amp;lt;Header&amp;gt;&amp;lt;Title&amp;gt;Header Attribute&amp;lt;/Title&amp;gt;&amp;lt;Author&amp;gt;Francisco Torres&amp;lt;/Author&amp;gt;&amp;lt;Shortcut&amp;gt;header&amp;lt;/Shortcut&amp;gt;&amp;lt;/Header&amp;gt;&amp;lt;Snippet&amp;gt;&amp;lt;Code Language=&amp;quot;CSharp&amp;quot;&amp;gt;&amp;lt;!</description>
    </item>
    
    <item>
      <title>Fakedoor</title>
      <link>https://torres-xyz.github.io/portfolioblog/posts/fakedoor/</link>
      <pubDate>Mon, 05 Aug 2024 00:00:00 +0000</pubDate>
      
      <guid>https://torres-xyz.github.io/portfolioblog/posts/fakedoor/</guid>
      <description>At Fakedoor, I am currently working as a Team Lead and Senior Unity Developer.
As a Team Lead I conduct most SCRUM ceremonies like daily stand-ups and sprint plannings. I am also in charge of hiring new talent and conducting interviews for new devs.
As a Senior Dev I develop these, 3D science lessons:
My team and I take the 3D scenes our artists create and we import then into Unity.</description>
    </item>
    
    <item>
      <title>Clean Code, by Uncle Bob</title>
      <link>https://torres-xyz.github.io/portfolioblog/posts/clean_code/</link>
      <pubDate>Fri, 29 Mar 2024 00:00:00 +0000</pubDate>
      
      <guid>https://torres-xyz.github.io/portfolioblog/posts/clean_code/</guid>
      <description>After having finished The Pragmatic Programmer , I&amp;rsquo;ve started another fan favorite: &amp;lsquo;Clean Code - A Handbook of Agile Software Development&amp;rsquo; by Uncle Bob.
It start&amp;rsquo;s its introduction with this osnews.com comic:
It follows this with some of the industry leading experts take on what they think clean code means.
It then concludes the introduction with the advice that this is a book that should be read at one&amp;rsquo;s own pace in order to fully understand the concepts it presents.</description>
    </item>
    
    <item>
      <title>The Pragmatic Programmer</title>
      <link>https://torres-xyz.github.io/portfolioblog/posts/the_pragmatic_programmer/</link>
      <pubDate>Sat, 10 Feb 2024 00:00:00 +0000</pubDate>
      
      <guid>https://torres-xyz.github.io/portfolioblog/posts/the_pragmatic_programmer/</guid>
      <description>A book I&amp;rsquo;ve been meaning to read for a long time arrived last month and I&amp;rsquo;ve finally finished it.
It was really interesting reading about so many concepts that we devs take for granted today - like DRY - in the way they were first introduced to the world.
One thing that stuck with me was the Broken Window Theory:
&amp;ldquo;Don&amp;rsquo;t leave &amp;ldquo;broken windows&amp;rdquo; (bad designs, wrong decisions, or poor code) unrepaired.</description>
    </item>
    
    <item>
      <title>Journey Match</title>
      <link>https://torres-xyz.github.io/portfolioblog/posts/journey_match/</link>
      <pubDate>Sat, 10 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://torres-xyz.github.io/portfolioblog/posts/journey_match/</guid>
      <description>Click here to play
At Arkadium, we have recently published our first Unity cross platform game, Journey Match. It runs on browsers, iOS and Android (apps leaving internal beta soon).
Journey Match is a re-imagining of another one of our titles: Mahjongg Dimensions, except instead of being a match 2 game, it&amp;rsquo;s now match 3!
I worked on this game from concept to release. My contributions were focused mainly on:</description>
    </item>
    
    <item>
      <title>ShaderToy Basics</title>
      <link>https://torres-xyz.github.io/portfolioblog/posts/shadertoy_basics/</link>
      <pubDate>Mon, 05 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://torres-xyz.github.io/portfolioblog/posts/shadertoy_basics/</guid>
      <description>Preparing UVs When writing a shader in ShaderToy, it is usual to prime your uvs in the following way:
vec2 uv = fragCoord / iResolution.xy;
this will make it so that your canvas goes from 0 to 1.
Then we recenter the coordinates, putting (0,0) in the center of the screen, and making the UVs range from -1 to 1:
v = uv * 2.0 - 1.0;
Finally, we fix the aspect ratio of the canvas:</description>
    </item>
    
    <item>
      <title>Zombunny Hologram</title>
      <link>https://torres-xyz.github.io/portfolioblog/posts/zombunny_hologram/</link>
      <pubDate>Sun, 04 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://torres-xyz.github.io/portfolioblog/posts/zombunny_hologram/</guid>
      <description>As I&amp;rsquo;m refreshing my knowledge on the basics of shaders, I&amp;rsquo;ll try to combine two different effects together. Here I&amp;rsquo;m combining a stripes effect using the frac function and a Rim highlight effect to create a hologram.
Source code: Shader &amp;#34;Custom/Hollogram&amp;#34; { Properties { _RimColor (&amp;#34;Rim Color&amp;#34;, Color) = (1,1,1,1) _RimPower (&amp;#34;Rim Power&amp;#34;, Range(0.5, 8.0)) = 3.0 _LinesFrequency (&amp;#34;Lines Frequency&amp;#34;, float) = 3.0 _ProportionBetweenLines (&amp;#34;Gap Size&amp;#34;, Range(0.0, 1.0)) = 0.</description>
    </item>
    
    <item>
      <title>Nokia 3310 screen shader</title>
      <link>https://torres-xyz.github.io/portfolioblog/posts/nokia_3310_shader/</link>
      <pubDate>Sun, 26 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://torres-xyz.github.io/portfolioblog/posts/nokia_3310_shader/</guid>
      <description>For an internal game jam at Arkadium, we each had to pick a word game idea and develop a prototype in 3 days.
The game I chose to develop was fairly simple, revolving around sending text messages. I got the game loop part done on the first day and spent the rest of my time polishing the screen shader for the phone.
Unity Shadergraph shader The frame around the screen is from an actual picture of the phone from wikipedia.</description>
    </item>
    
    <item>
      <title>Mahjong 3D - WebGL Game</title>
      <link>https://torres-xyz.github.io/portfolioblog/posts/mahjong_3d/</link>
      <pubDate>Wed, 29 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://torres-xyz.github.io/portfolioblog/posts/mahjong_3d/</guid>
      <description>Play Mahjong 3D (please wait a moment while the game loads)
About the game Gameplay demo
How to play About the project Developed in one week as a coding challenge I grew overly fond of, this Unity game runs both on Android and on the web through WebGL. Please find the source code in the linked github repo.
There are 3 levels of increasing difficulty, but they never get too hard as you always have 5 minutes to beat each one.</description>
    </item>
    
    <item>
      <title>Endless Runner</title>
      <link>https://torres-xyz.github.io/portfolioblog/posts/endless_runner/</link>
      <pubDate>Tue, 12 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://torres-xyz.github.io/portfolioblog/posts/endless_runner/</guid>
      <description>An Endless Runner Built In One Month While freelancing for the start-up Digital Influx, I coordinated a team of two Unity programmers (myself included) and two 3D/2D artists to create an Endless Runner game.
Your browser does not support the video tag.The game was designed with low-power machines in mind from the start, as the target audience were young students who would be playing the game on their school computer’s browser.</description>
    </item>
    
    <item>
      <title>Cubist</title>
      <link>https://torres-xyz.github.io/portfolioblog/posts/cubist/</link>
      <pubDate>Mon, 05 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://torres-xyz.github.io/portfolioblog/posts/cubist/</guid>
      <description>Cubist - AR App I made this demo for the archviz firm 1825, as we wanted to break into the AR scene.
I used Unity 2019 with the AR Foundation and ARCore XR Plugin packages to build this.
You point your camera and press the main button to draw voxels in the air around you, sculpting forms with your movement.
You can try the app here: Cubist on Google Play</description>
    </item>
    
  </channel>
</rss>
